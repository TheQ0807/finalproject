package com.ese.controller.manage;

import java.io.File;
import java.io.IOException;

import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.FileCopyUtils;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.ese.common.encrypt.Sha256;
import com.ese.service.manage.BreakApplyService;
import com.ese.service.manage.EmployeeService;
import com.ese.vo.afterservice.Center;
import com.ese.vo.forms.EmployeeForm;
import com.ese.vo.hr.Department;
import com.ese.vo.hr.Employee;
import com.ese.vo.hr.Position;

@Controller
public class EmployeeController {

	
	@Value("${file.upload.directory}")
	String uploadDirectory;
	
	
	@Autowired
	EmployeeService employeeService;
	
	@Autowired
	BreakApplyService breakApplyService;
	
	
	@RequestMapping("/manage/personnel/emplist.do")
	public String getAllEmp(Model model) {
		model.addAttribute("employees", employeeService.getAllEmp());
		return "manage/personnel/personnelList";
	}
	
	@RequestMapping("/manage/personnel/form.do")
	public String form(Model model) {
		model.addAttribute("employeeForm", new EmployeeForm());
		model.addAttribute("centerList", employeeService.getAllCenter());
		return "manage/personnel/personnelAdd";
	}
	
	
	@RequestMapping("/manage/personnel/addemp.do")
	public String register(@Valid EmployeeForm employeeForm, BindingResult errors) throws IOException {
			
			String email = employeeForm.getEmail();
			if(employeeService.getEmpById(email) != null) {
				return "redirect:/manage/personnel/form.do?err=fail1";
			}else {
				Center center = new Center(); 
				center.setId(employeeForm.getCenter());
				Department department = new Department();
				department.setId(employeeForm.getDepartment());
				Position position = new Position();
				position.setId(employeeForm.getPosition());
			
				System.out.println(employeeForm);
				Employee employee = new Employee();
				BeanUtils.copyProperties(employeeForm, employee);
				employee.setPassword(Sha256.encrypt(employeeForm.getPassword()));
				employee.setCenter(center);
				employee.setDepartment(department);
				employee.setPosition(position);
				
				// 첨부파일을 특정 폴더에 저장하는 처리
				MultipartFile pic = employeeForm.getPic();
				
				if(!pic.isEmpty()){
					String filename = System.currentTimeMillis() + pic.getOriginalFilename();
					employee.setPic(filename);
					
					FileCopyUtils.copy(pic.getBytes(), new File(uploadDirectory, filename));
				};

				employeeService.addEmp(employee);
		
				return "redirect:/manage/personnel/form.do";
			}
	}
	
	@RequestMapping("/manage/personnel/hoildayPer.do")
	public String getAllDeptHoilday(Model model) {
		model.addAttribute("employees", employeeService.getAllDeptHoilday() );
		return "/manage/personnel/holidayPersonnel";
	}
		
	@RequestMapping("/manage/personnel/apply.do")
	public String holidayApplyList(Model model) {
		model.addAttribute("applylist", breakApplyService.getAllBreak());
		return "/manage/personnel/holidayApplyList";
	}
	
	@RequestMapping("/manage/login.do")
	public String login() {
		
		return "/manage/login";
	}
	
	@RequestMapping("/manage/logincheck.do")
	public String loginProcess (@RequestParam("email") String email,
								@RequestParam("pwd") String pwd,
								HttpSession session) {
		
 		Employee users = employeeService.getEmpById(email);
 		
 		String pass = Sha256.encrypt(pwd);
 		
 		if(users == null) {
 			return "redirect:/manage/login.do?error=fail1";
 		}
 		if(!users.getPassword().equals(pass)) {
			return "redirect:/manage/login.do?error=fail1";
		}
 		if(users.getDepartment().getId().equals("DEPT-SC")) {
 			return "redirect:/manage/login.do?error=fail2";
 		}
 		if(users.getDepartment().getId().equals("DEPT-HR")) {
 			return "redirect:/manage/personnel/emplist.do";
 		}
 		
 		session.setAttribute("loginedUsers", users);
 		
		
		return "redirect:/manage/personnel/emplist.do";
	}
	
}


